//go:build ignore
// +build ignore

package main

import (
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"os/exec"
	"sort"
	"strings"
)

const (
	reservedWordsBaseURL = "https://raw.githubusercontent.com/postgres/postgres/master/doc/src/sgml/keywords"
	outputFile           = "zz_generated.postgresql_reserved_words.go"
)

var (
	reservedWordsBasenames = []string{
		"sql1992-nonreserved.txt",
		"sql1992-reserved.txt",
		"sql2011-02-nonreserved.txt",
		"sql2011-02-reserved.txt",
		"sql2011-09-nonreserved.txt",
		"sql2011-09-reserved.txt",
		"sql2011-14-nonreserved.txt",
		"sql2011-14-reserved.txt",
		"sql2016-02-nonreserved.txt",
		"sql2016-02-reserved.txt",
		"sql2016-09-nonreserved.txt",
		"sql2016-09-reserved.txt",
		"sql2016-14-nonreserved.txt",
		"sql2016-14-reserved.txt",
	}
)

func main() {
	allWords := map[string]bool{}

	for _, basename := range reservedWordsBasenames {
		amReserved := strings.HasSuffix(basename, "-reserved.txt")

		moreWords := func() []string {
			fullURL := fmt.Sprintf("%s/%s", reservedWordsBaseURL, basename)
			resp, err := http.Get(fullURL)
			if err != nil {
				log.Fatal(err)
			}

			if resp.StatusCode != 200 {
				log.Fatalf("response for %q is %v", fullURL, resp.StatusCode)
			}

			defer resp.Body.Close()
			bodyBytes, err := io.ReadAll(resp.Body)
			if err != nil {
				log.Fatal(err)
			}

			words := []string{}
			for _, word := range strings.Split(string(bodyBytes), "\n") {
				trimmedWord := strings.TrimSpace(word)
				if trimmedWord == "" {
					continue
				}
				words = append(words, trimmedWord)
			}

			return words
		}()
		for _, word := range moreWords {
			allWords[word] = amReserved
		}
	}

	quotedLowWords := []string{}
	for word := range allWords {
		quotedLowWords = append(quotedLowWords, fmt.Sprintf("\"%s\"", strings.ToLower(word)))
	}

	sort.Strings(quotedLowWords)

	goSrcBody := strings.Join([]string{
		"// +build !ignore_autogenerated",
		"// This file is generated. DO NOT EDIT.",
		"",
		"package postgresqlreservedwords",
		"",
		"var (",
		"\tWords = map[string]struct{}{",
		"\t\t" + strings.Join(quotedLowWords, ": struct{}{},\n\t\t") + ": struct{}{},",
		"\t}",
		")",
		"",
	}, "\n")

	if err := os.WriteFile(outputFile, []byte(goSrcBody), 0644); err != nil {
		log.Fatal(err)
	}

	if err := exec.Command("goimports", "-w", outputFile).Run(); err != nil {
		log.Fatal(err)
	}
}
